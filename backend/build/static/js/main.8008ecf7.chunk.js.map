{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","onClick","className","content","value","important","baseUrl","noteService","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","App","props","useState","notes","setNotes","writing","setWriting","showAll","setShowAll","notesToShow","filter","useEffect","initialNotes","map","find","n","changedNote","returnedNote","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","console","log","concat","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"8LAaeA,EAXF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACpB,OACE,8BACE,qBAAIC,UAAU,OAAd,UACGF,EAAKG,QACN,wBAAQD,UAAU,aAAaE,MAAOJ,EAAMC,QAASA,EAArD,SAA+DD,EAAKK,UAAY,qBAAuB,yB,gBCJzGC,EAAU,aAmBDC,EAFK,CAAEC,OAfP,WAEd,OADiBC,IAAMC,IAAIJ,GACZK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAaZC,OAVf,SAACC,GAEf,OADiBN,IAAMO,KAAKV,EAASS,GACtBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQJI,OALvB,SAACC,EAAIH,GAEnB,OADgBN,IAAMU,IAAN,UAAab,EAAb,YAAwBY,GAAMH,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCwE3BO,EArFH,SAACC,GAAW,IAAD,EAEKC,mBAAS,IAFd,mBAEdC,EAFc,KAEPC,EAFO,OAGSF,mBAC5B,iBAJmB,mBAGdG,EAHc,KAGLC,EAHK,OAOSJ,oBAAS,GAPlB,mBAOdK,EAPc,KAOLC,EAPK,KASfC,EAAcF,EAChBJ,EACAA,EAAMO,QAAO,SAAA9B,GAAI,OAAIA,EAAKK,aAG9B0B,qBAAU,WACRxB,EACGC,SACAG,MAAK,SAAAqB,GACNR,EAASQ,QAEV,IAuCH,OACE,gCACE,uCACA,4BAAIL,EAAU,oBAAsB,iCACpC,6BACGE,EAAYI,KAAI,SAAAjC,GAAI,OACnB,cAAC,EAAD,CAAMC,QAAS,kBAjBI,SAACiB,GAC1B,IAAMlB,EAAOuB,EAAMW,MAAK,SAAAC,GAAC,OAAIA,EAAEjB,KAAOA,KAChCkB,EAAW,2BAAOpC,GAAP,IAAaK,WAAYL,EAAKK,YAE/CE,EACGU,OAAOC,EAAIkB,GACXzB,MAAK,SAAA0B,GACJb,EAASD,EAAMU,KAAI,SAAAjC,GAAI,OAAIA,EAAKkB,KAAOA,EAAKlB,EAAOqC,SAU5BC,CAAmBtC,EAAKkB,KAAmBlB,KAAMA,GAAfA,EAAKkB,SAGhE,gCACE,2CACA,uBAAMqB,SA5CU,SAACC,GACrBA,EAAMC,iBACN,IAAMC,EAAa,CACjBvC,QAASsB,EACTkB,MAAM,IAAIC,MAAOC,cACjBxC,UAAWyC,KAAKC,SAAW,GAC3B7B,GAAIK,EAAMyB,OAAS,GAGrBC,QAAQC,IAAIR,EAAWxB,IAEvBX,EACGO,OAAO4B,GACP/B,MAAK,SAAA0B,GACJb,EAASD,EAAM4B,OAAOd,IACtBX,EAAW,OAGfF,EAASD,EAAM4B,OAAOT,IACtBhB,EAAW,KAyBP,UACE,uBACEtB,MAAOqB,EACP2B,SAnDY,SAACZ,GACrBd,EAAWc,EAAMa,OAAOjD,UAoDlB,wBAAQkD,KAAK,SAAb,yBAGF,wBAAQrD,QAAS,kBAAI2B,GAAYD,IAAjC,SAA4CA,EAAU,4BAA8B,0B,MC7E5F4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8008ecf7.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, onClick }) => {\n  return (\n    <div>\n      <li className='note'>\n        {note.content}\n        <button className='noteButton' value={note} onClick={onClick}>{note.important ? 'Make not important' : 'Make important'}</button>\n      </li>\n    </div>\n  )\n}\n\nexport default Note","import axios from \"axios\";\n// Old url: http://localhost:3001/api/notes\n// Current url, not relative: https://calm-brushlands-87037.herokuapp.com/api/notes\nconst baseUrl = \"/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n\treturn request.then(response => response.data)\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n\treturn request.then(response => response.data)\n};\n\nconst update = (id, newObject) => {\n\tconst request = axios.put(`${baseUrl}/${id}`, newObject);\n\treturn request.then(response => response.data)\n};\n\nconst noteService = { getAll, create, update };\n\nexport default noteService;\n","import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes.js'\n\nconst App = (props) => {\n\n  const [notes, setNotes] = useState([])\n  const [writing, setWriting] = useState(\n    'a new note...'\n  )\n  // if showAll is true, all notes are shown. Else, only important notes are shown.\n  const [showAll, setShowAll] = useState(true)\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n  \n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n      setNotes(initialNotes)\n    })\n  }, [])\n\n  const handleWriting = (event) => {\n    setWriting(event.target.value)\n  }\n\n  const handleNewNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: writing,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1\n    }\n\n    console.log(noteObject.id)\n    \n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setWriting('')\n      })\n\n    setNotes(notes.concat(noteObject));\n    setWriting('')\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important: !note.important}\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n  }\n  \n  return (\n    <div>\n      <h1>Notes</h1>\n      <b>{showAll ? 'Showing all notes' : 'Only showing important notes'}</b>\n      <ul>\n        {notesToShow.map(note => \n          <Note onClick={() => toggleImportanceOf(note.id)} key={note.id} note={note} />\n        )}\n      </ul>\n      <div>\n        <h2>Add notes</h2>\n        <form onSubmit={handleNewNote}>\n          <input \n            value={writing}\n            onChange={handleWriting}\n          />\n          <button type=\"submit\">Add note</button>\n        </form>\n       \n        <button onClick={()=>setShowAll(!showAll)}>{showAll ? 'Only show important notes' : 'Show all notes'}</button>\n              \n      </div>\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)"],"sourceRoot":""}