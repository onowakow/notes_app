{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/onowakow/Desktop/FSO/note-clones/part2-notes/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport axios from 'axios';\nimport noteService from './services/notes.js';\n\nconst App = props => {\n  _s();\n\n  const [notes, setNotes] = useState([]);\n  const [writing, setWriting] = useState('a new note...'); // if showAll is true, all notes are shown. Else, only important notes are shown.\n\n  const [showAll, setShowAll] = useState(true);\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n  useEffect(() => {\n    noteService.getAll().then(response => setNotes(response.data));\n  }, []);\n\n  const handleWriting = event => {\n    setWriting(event.target.value);\n  };\n\n  const handleNewNote = event => {\n    event.preventDefault();\n    const noteObject = {\n      content: writing,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1\n    };\n    setNotes(notes.concat(noteObject));\n    setWriting('');\n  };\n\n  const toggleImportanceOf = id => {\n    const url = `http://localhost:3001/notes/${id}`;\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note,\n      important: !note.important\n    };\n    axios.put(url, changedNote).then(response => {\n      setNotes(notes.map(note => note.id !== id ? note : response.data));\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: showAll ? 'Showing all notes' : 'Only showing important notes'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notesToShow.map(note => /*#__PURE__*/_jsxDEV(Note, {\n        onClick: () => toggleImportanceOf(note.id),\n        note: note\n      }, note.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleNewNote,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: writing,\n          onChange: handleWriting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowAll(!showAll),\n        children: showAll ? 'Only show important notes' : 'Show all notes'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"lbUlFvFe6+pvhL7hxvms8Bt9VnY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/onowakow/Desktop/FSO/note-clones/part2-notes/src/App.js"],"names":["React","useState","useEffect","Note","axios","noteService","App","props","notes","setNotes","writing","setWriting","showAll","setShowAll","notesToShow","filter","note","important","getAll","then","response","data","handleWriting","event","target","value","handleNewNote","preventDefault","noteObject","content","date","Date","toISOString","Math","random","id","length","concat","toggleImportanceOf","url","find","n","changedNote","put","map"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport axios from 'axios'\nimport noteService from './services/notes.js'\n\nconst App = (props) => {\n\n  const [notes, setNotes] = useState([])\n  const [writing, setWriting] = useState(\n    'a new note...'\n  )\n  // if showAll is true, all notes are shown. Else, only important notes are shown.\n  const [showAll, setShowAll] = useState(true)\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n  \n\n  useEffect(() => {\n    noteService.getAll().then(response => (\n      setNotes(response.data)\n    ))\n  }, [])\n\n  const handleWriting = (event) => {\n    setWriting(event.target.value)\n  }\n\n  const handleNewNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: writing,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1\n    }\n\n    setNotes(notes.concat(noteObject));\n    setWriting('')\n  }\n\n  const toggleImportanceOf = (id) => {\n\n    const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important: !note.important}\n\n    axios.put(url, changedNote).then(response => {\n      setNotes(notes.map(note => note.id !== id ? note : response.data))\n    })\n    \n  }\n  \n  return (\n    <div>\n      <h1>Notes</h1>\n      <b>{showAll ? 'Showing all notes' : 'Only showing important notes'}</b>\n      <ul>\n        {notesToShow.map(note => \n          <Note onClick={() => toggleImportanceOf(note.id)} key={note.id} note={note} />\n        )}\n      </ul>\n      <div>\n        <h2>Add notes</h2>\n        <form onSubmit={handleNewNote}>\n          <input \n            value={writing}\n            onChange={handleWriting}\n          />\n          <button type=\"submit\">Add note</button>\n        </form>\n       \n        <button onClick={()=>setShowAll(!showAll)}>{showAll ? 'Only show important notes' : 'Show all notes'}</button>\n              \n      </div>\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}