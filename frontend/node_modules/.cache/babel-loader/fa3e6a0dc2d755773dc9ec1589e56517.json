{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _objectSpread from\"/home/onowakow/Desktop/FSO/notes/notes_app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/onowakow/Desktop/FSO/notes/notes_app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import Note from'./components/Note';import noteService from'./services/notes.js';var App=function App(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),notes=_useState2[0],setNotes=_useState2[1];var _useState3=useState('a new note...'),_useState4=_slicedToArray(_useState3,2),writing=_useState4[0],setWriting=_useState4[1];// if showAll is true, all notes are shown. Else, only important notes are shown.\nvar _useState5=useState(true),_useState6=_slicedToArray(_useState5,2),showAll=_useState6[0],setShowAll=_useState6[1];var notesToShow=showAll?notes:notes.filter(function(note){return note.important;});useEffect(function(){noteService.getAll().then(function(initialNotes){setNotes(initialNotes);});},[]);var handleWriting=function handleWriting(event){setWriting(event.target.value);};var handleNewNote=function handleNewNote(event){event.preventDefault();var noteObject={content:writing,date:new Date().toISOString(),important:Math.random()<0.5,id:notes.length+1};noteService.create(noteObject).then(function(returnedNote){setNotes(notes.concat(returnedNote));setWriting('');});setNotes(notes.concat(noteObject));setWriting('');};var toggleImportanceOf=function toggleImportanceOf(id){var note=notes.find(function(n){return n.id===id;});var changedNote=_objectSpread(_objectSpread({},note),{},{important:!note.important});noteService.update(id,changedNote).then(function(returnedNote){setNotes(notes.map(function(note){return note.id!==id?note:returnedNote;}));});};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Notes\"}),/*#__PURE__*/_jsx(\"b\",{children:showAll?'Showing all notes':'Only showing important notes'}),/*#__PURE__*/_jsx(\"ul\",{children:notesToShow.map(function(note){return/*#__PURE__*/_jsx(Note,{onClick:function onClick(){return toggleImportanceOf(note.id);},note:note},note.id);})}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Add notes\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleNewNote,children:[/*#__PURE__*/_jsx(\"input\",{value:writing,onChange:handleWriting}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Add note\"})]}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return setShowAll(!showAll);},children:showAll?'Only show important notes':'Show all notes'})]})]});};export default App;","map":{"version":3,"sources":["/home/onowakow/Desktop/FSO/notes/notes_app/frontend/src/App.js"],"names":["React","useState","useEffect","Note","noteService","App","props","notes","setNotes","writing","setWriting","showAll","setShowAll","notesToShow","filter","note","important","getAll","then","initialNotes","handleWriting","event","target","value","handleNewNote","preventDefault","noteObject","content","date","Date","toISOString","Math","random","id","length","create","returnedNote","concat","toggleImportanceOf","find","n","changedNote","update","map"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes.js'\n\nconst App = (props) => {\n\n  const [notes, setNotes] = useState([])\n  const [writing, setWriting] = useState(\n    'a new note...'\n  )\n  // if showAll is true, all notes are shown. Else, only important notes are shown.\n  const [showAll, setShowAll] = useState(true)\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n  \n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n      setNotes(initialNotes)\n    })\n  }, [])\n\n  const handleWriting = (event) => {\n    setWriting(event.target.value)\n  }\n\n  const handleNewNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: writing,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setWriting('')\n      })\n\n    setNotes(notes.concat(noteObject));\n    setWriting('')\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important: !note.important}\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n  }\n  \n  return (\n    <div>\n      <h1>Notes</h1>\n      <b>{showAll ? 'Showing all notes' : 'Only showing important notes'}</b>\n      <ul>\n        {notesToShow.map(note => \n          <Note onClick={() => toggleImportanceOf(note.id)} key={note.id} note={note} />\n        )}\n      </ul>\n      <div>\n        <h2>Add notes</h2>\n        <form onSubmit={handleNewNote}>\n          <input \n            value={writing}\n            onChange={handleWriting}\n          />\n          <button type=\"submit\">Add note</button>\n        </form>\n       \n        <button onClick={()=>setShowAll(!showAll)}>{showAll ? 'Only show important notes' : 'Show all notes'}</button>\n              \n      </div>\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}