{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/onowakow/Desktop/FSO/notes/notes_app/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport noteService from './services/notes.js';\n\nconst App = props => {\n  _s();\n\n  const [notes, setNotes] = useState([]);\n  const [writing, setWriting] = useState('a new note...'); // if showAll is true, all notes are shown. Else, only important notes are shown.\n\n  const [showAll, setShowAll] = useState(true);\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n  useEffect(() => {\n    noteService.getAll().then(initialNotes => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const handleWriting = event => {\n    setWriting(event.target.value);\n  };\n\n  const handleNewNote = event => {\n    event.preventDefault();\n    const noteObject = {\n      content: writing,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1\n    };\n    console.log(noteObject.id);\n    noteService.create(noteObject).then(returnedNote => {\n      setNotes(notes.concat(returnedNote));\n      setWriting('');\n    });\n    setNotes(notes.concat(noteObject));\n    setWriting('');\n  };\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note,\n      important: !note.important\n    };\n    noteService.update(id, changedNote).then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote));\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: showAll ? 'Showing all notes' : 'Only showing important notes'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notesToShow.map(note => /*#__PURE__*/_jsxDEV(Note, {\n        onClick: () => toggleImportanceOf(note.id),\n        note: note\n      }, note.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleNewNote,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: writing,\n          onChange: handleWriting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowAll(!showAll),\n        children: showAll ? 'Only show important notes' : 'Show all notes'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"lbUlFvFe6+pvhL7hxvms8Bt9VnY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/onowakow/Desktop/FSO/notes/notes_app/frontend/src/App.js"],"names":["React","useState","useEffect","Note","noteService","App","props","notes","setNotes","writing","setWriting","showAll","setShowAll","notesToShow","filter","note","important","getAll","then","initialNotes","handleWriting","event","target","value","handleNewNote","preventDefault","noteObject","content","date","Date","toISOString","Math","random","id","length","console","log","create","returnedNote","concat","toggleImportanceOf","find","n","changedNote","update","map"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes.js'\n\nconst App = (props) => {\n\n  const [notes, setNotes] = useState([])\n  const [writing, setWriting] = useState(\n    'a new note...'\n  )\n  // if showAll is true, all notes are shown. Else, only important notes are shown.\n  const [showAll, setShowAll] = useState(true)\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n  \n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n      setNotes(initialNotes)\n    })\n  }, [])\n\n  const handleWriting = (event) => {\n    setWriting(event.target.value)\n  }\n\n  const handleNewNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: writing,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1\n    }\n\n    console.log(noteObject.id)\n    \n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setWriting('')\n      })\n\n    setNotes(notes.concat(noteObject));\n    setWriting('')\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important: !note.important}\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n  }\n  \n  return (\n    <div>\n      <h1>Notes</h1>\n      <b>{showAll ? 'Showing all notes' : 'Only showing important notes'}</b>\n      <ul>\n        {notesToShow.map(note => \n          <Note onClick={() => toggleImportanceOf(note.id)} key={note.id} note={note} />\n        )}\n      </ul>\n      <div>\n        <h2>Add notes</h2>\n        <form onSubmit={handleNewNote}>\n          <input \n            value={writing}\n            onChange={handleWriting}\n          />\n          <button type=\"submit\">Add note</button>\n        </form>\n       \n        <button onClick={()=>setShowAll(!showAll)}>{showAll ? 'Only show important notes' : 'Show all notes'}</button>\n              \n      </div>\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}