{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/onowakow/Desktop/FSO/note-clones/part2-notes/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport axios from 'axios';\n\nconst Notes = ({\n  notes,\n  onClick\n}) => {\n  return notes.map(note => /*#__PURE__*/_jsxDEV(Note, {\n    onClick: onClick,\n    note: note\n  }, note.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 7\n  }, this));\n};\n\n_c = Notes;\n\nconst App = props => {\n  _s();\n\n  const [notes, setNotes] = useState([]);\n  const [writing, setWriting] = useState('a new note...'); // if showAll is true, all notes are shown. Else, only important notes are shown.\n\n  const [showAll, setShowAll] = useState(true);\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n  useEffect(() => {\n    axios.get('http://localhost:3001/notes').then(request => {\n      console.log(\"promise fulfilled\");\n      setNotes(request.data);\n    });\n  }, []);\n\n  const handleWriting = event => {\n    setWriting(event.target.value);\n  };\n\n  const handleNewNote = event => {\n    event.preventDefault();\n    const noteObject = {\n      content: writing,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1\n    };\n    setNotes(notes.concat(noteObject));\n    setWriting('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: showAll ? 'Showing all notes' : 'Only showing important notes'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(Notes, {\n        onClick: toggleImportance,\n        notes: notesToShow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleNewNote,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: writing,\n          onChange: handleWriting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowAll(!showAll),\n        children: showAll ? 'Only show important notes' : 'Show all notes'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"lbUlFvFe6+pvhL7hxvms8Bt9VnY=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Notes\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/home/onowakow/Desktop/FSO/note-clones/part2-notes/src/App.js"],"names":["React","useState","useEffect","Note","axios","Notes","notes","onClick","map","note","id","App","props","setNotes","writing","setWriting","showAll","setShowAll","notesToShow","filter","important","get","then","request","console","log","data","handleWriting","event","target","value","handleNewNote","preventDefault","noteObject","content","date","Date","toISOString","Math","random","length","concat","toggleImportance"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport axios from 'axios'\n\nconst Notes = ({notes, onClick}) => {\n  return (\n    notes.map(note => \n      <Note onClick={onClick} key={note.id} note={note} />\n    )\n  )\n}\n\nconst App = (props) => {\n\n  const [notes, setNotes] = useState([])\n  const [writing, setWriting] = useState(\n    'a new note...'\n  )\n  // if showAll is true, all notes are shown. Else, only important notes are shown.\n  const [showAll, setShowAll] = useState(true)\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n  \n\n  useEffect(() => {\n    axios.get('http://localhost:3001/notes')\n    .then(request => {\n      console.log(\"promise fulfilled\")\n      setNotes(request.data)\n    })\n  }, [])\n\n  const handleWriting = (event) => {\n    setWriting(event.target.value)\n  }\n\n  const handleNewNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: writing,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1\n    }\n\n    setNotes(notes.concat(noteObject));\n    setWriting('')\n  }\n  \n  return (\n    <div>\n      <h1>Notes</h1>\n      <b>{showAll ? 'Showing all notes' : 'Only showing important notes'}</b>\n      <ul>\n        <Notes onClick={toggleImportance} notes={notesToShow} />\n      </ul>\n      <div>\n        <h2>Add notes</h2>\n        <form onSubmit={handleNewNote}>\n          <input \n            value={writing}\n            onChange={handleWriting}\n          />\n          <button type=\"submit\">Add note</button>\n        </form>\n       \n        <button onClick={()=>setShowAll(!showAll)}>{showAll ? 'Only show important notes' : 'Show all notes'}</button>\n              \n      </div>\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}